#lang racket

(define tm33 '((1 2 3)
               (4 5 6)
               (7 8 9)))

(define tm34 '((1 2 3 10)
               (4 5 6 11)
               (7 8 9 12)))

(define tmxv1 '((X X X)
                (- - -)
                (- - -)))

(define tmxv2 '( (- - -)
                 (X X X)
                 (- - -)))

(define tmxv3 '( (- - -)
                 (- - -)
                 (X X X)))

(define tmxv4 '( (- - -)
                 (- - -)
                 (X - X)))

(define tmxo5 '( (- - O)
                 (- - O)
                 (O - O)))

(define tmxo6 '( (- - O - - -)
                 (- - O X X X)
                 (O - O O O O)))

;Functions that generate game's matrix
(define (generateMatrix numrows numcols)
  (cond
    (( or (>= 2 numrows) (>= 2 numcols)
         (<= 11 numrows) (<= 11 numcols))#f)
    (else (generateMatrix_aux numrows numcols numcols '() '() ))))

(define (generateMatrix_aux numrows numcols ininumcols row matrix)
  (cond
    ((zero? numrows) matrix)
    ((zero? numcols) (generateMatrix_aux (- numrows 1) ininumcols ininumcols '() (append matrix (list row))))
    (else (generateMatrix_aux numrows (- numcols 1) ininumcols (append row (list '-)) matrix))))


;Function to get an element at a given position in a list
(define (getAt index mlist)
  (cond
    (( or (> index (length mlist)) (<= index 0)) #f);validates indexes
    ((equal? index 1) (car mlist))
    (else (getAt (- index 1) (cdr mlist)))))

;Function to get an element at a given position in a matrix
(define (getAtMatrix indexi indexj matrix)
  (getAt indexj (getAt indexi matrix)))

;Function to set an element at a given position in a list
(define (setAt index element mlist)
  (cond
     (( or (> index (length mlist)) (<= index 0)) #f);validates indexes
     ((equal? index 1) (append (list element) (cdr mlist)))
     (else (append (list (car mlist)) (setAt (- index 1) element (cdr mlist))))))

;Functions to set an element at a given position in a matrix
(define (setAtMatrix indexi indexj element matrix)
  (cond
    (( or (> indexi (length matrix)) (<= indexi 0) (> indexj (length matrix)) (<= indexj 0)) #f) ;validates indexes
    (else (setAtMatrix_aux indexi indexj element matrix))))
                  
(define (setAtMatrix_aux indexi indexj element matrix)
  (cond
    ((equal? indexi 1) (append (list (setAt indexj element (car matrix))) (cdr matrix)))
    (else (append (list (car matrix)) (setAtMatrix_aux (- indexi 1) indexj element (cdr matrix))))))

;Function that returns a column given an index
(define (getColumn indexj matrix)
  (cond
    (( or (> indexj (length (car matrix))) (<= indexj 0)) #f);validates indexes
    (else (getColumn_aux indexj (length matrix) matrix))))

(define (getColumn_aux indexj numrows matrix)
  (cond
    ((zero? numrows) '())
    (else (append  (getColumn_aux indexj (- numrows 1) matrix) (list (getAtMatrix numrows indexj matrix))))))

;Function that returns a row given an index
(define (getRow indexi matrix)
  (cond
    (( or (> indexi (length matrix)) (<= indexi 0)) #f);validates indexes
    (else (getRow_aux indexi (length (car matrix)) matrix))))

(define (getRow_aux indexi numcols matrix)
  (cond
    ((zero? numcols) '())
    (else (append  (getRow_aux indexi (- numcols 1) matrix) (list (getAtMatrix indexi numcols matrix))))))

;Function that gets a diagonal in square or nonsquare matrix
(define (getDiagonals matrix)
  (cond
    ((equal? (length matrix) (length


;Functions that verify if there's a win in a row

(define (checkVictoryRow player matrix)
  (checkVictoryRow_aux player (length matrix) matrix ))

(define (checkVictoryRow_aux player numRows matrix)
  (cond
    ((zero? numRows) #f)
    ((checkRow player (getRow numRows matrix)) #t)
    (else (checkVictoryRow_aux player (- numRows 1) matrix))))

;Functions that verify if there's a win in a column
(define (checkVictoryColumn player matrix)
  (checkVictoryColumn_aux player (length (car matrix)) matrix ))

(define (checkVictoryColumn_aux player numCols matrix)
  (cond
    ((zero? numCols) #f)
    ((checkRow player (getColumn numCols matrix)) #t)
    (else (checkVictoryColumn_aux player (- numCols 1) matrix))))

    
;Function that checks if all the elements in a row are the same as the player's token  
(define (checkRow player row)
  (cond
    ((null? row) #t)
    ((not (equal? (car row) player)) #f)
    (else (checkRow player (cdr row)))))



                     
  
  